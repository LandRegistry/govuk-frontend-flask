services:
  app:
    build: .
    container_name: app
    restart: always
    environment:
      CONTACT_EMAIL: ${CONTACT_EMAIL}
      CONTACT_PHONE: ${CONTACT_PHONE}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      DEPARTMENT_NAME: ${DEPARTMENT_NAME}
      DEPARTMENT_URL: ${DEPARTMENT_URL}
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}
      SECRET_KEY: ${SECRET_KEY}
      SERVICE_NAME: ${SERVICE_NAME}
      SERVICE_PHASE: ${SERVICE_PHASE}
      SERVICE_URL: ${SERVICE_URL}
    expose:
      - 5000
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:5000/health')",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: ./requirements.txt
          target: /home/appuser/requirements.txt
        - action: sync+restart
          path: ./app
          target: /home/appuser/app

  db:
    image: postgres:18-alpine
    container_name: db
    restart: always
    ports:
      - 5432:5432
    expose:
      - 5432
    shm_size: 128mb
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s

  cache:
    image: redis:7-alpine
    container_name: cache
    restart: always
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - redis_data:/data

  web:
    build: ./web
    container_name: web
    restart: always
    ports:
      - 443:443
    healthcheck:
      test: ["CMD", "curl", "-kfs", "https://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      app:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: ./web/package.json
        - action: sync+restart
          path: ./web/nginx.conf
          target: /etc/nginx/conf.d/nginx.conf
        - action: rebuild
          path: ./web/src

volumes:
  redis_data:
  pg_data:
